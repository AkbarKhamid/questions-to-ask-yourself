---
import Layout from '../layouts/Layout.astro';
import { QuestionCard } from '@/components/QuestionCard';
import { questions } from '@/data/questions';
import '@/styles/globals.css';

// Get unique categories and count their occurrences
const categoryCount = questions.reduce((acc, question) => {
  acc[question.category] = (acc[question.category] || 0) + 1;
  return acc;
}, {} as Record<string, number>);

// Sort categories by name
const sortedCategories = Object.entries(categoryCount).sort(([a], [b]) => a.localeCompare(b));
---

<Layout title="Self-Reflection Questions"> 
  <main class="min-h-screen bg-white"> 
    <div class="container mx-auto px-4 py-12">
      <div class="text-center mb-12">
        <h1 class="text-4xl font-bold text-gray-900 mb-4">
          Gain Clarity
        </h1>

        <p class="text-gray-600 mb-8">
          Fun and thought-provoking questions to help you a little when making decisions. <br> No data is collected.
        </p>

        {/* Search Box */}
        <div class="max-w-2xl mx-auto mb-8">
          <input 
            type="text" 
            id="search-box"
            placeholder="Should I ..."
            class="w-full px-4 py-3 rounded-lg border-2 border-amber-200 focus:border-amber-500 focus:ring-2 focus:ring-amber-200 focus:outline-none transition-colors text-lg"
          />
        </div>

        {/* Selected Categories Chips Area */}
        <div id="selected-categories" class="max-w-2xl mx-auto mb-6 flex flex-wrap gap-2">
          {/* Chips will be rendered here by script */}
        </div>
      </div>

      <div id="questions-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {questions.map((question, index) => (
          <QuestionCard question={question} index={index} />
        ))}
      </div>

      {/* Category Index */}
      <div class="mt-24 pt-12">
        <h2 class="text-2xl font-semibold text-gray-900 mb-8">Categories Index</h2>
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-x-24 gap-y-4">
          <div class="flex items-baseline cursor-pointer hover:text-amber-600 group" data-category="all">
            <span class="capitalize text-gray-800 font-semibold w-[160px] group-hover:text-amber-600">All</span>
            <div class="flex-1 mx-8 border-b-[3px] border-dotted border-gray-400 mb-1 group-hover:border-amber-200" />
            <span class="text-gray-800 font-semibold group-hover:text-amber-600 pl-2 w-8 text-right">{questions.length}</span>
          </div>
          {sortedCategories.map(([category, count], index) => (
            <div class="flex items-baseline cursor-pointer hover:text-amber-600 group" data-category={category}>
              <span class="capitalize text-gray-800 font-semibold w-[160px] group-hover:text-amber-600">{category}</span>
              <div class="flex-1 mx-8 border-b-[3px] border-dotted border-gray-400 mb-1 group-hover:border-amber-200" />
              <span class="text-gray-800 font-semibold group-hover:text-amber-600 pl-2 w-8 text-right">{count}</span>
            </div>
          ))}
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const grid = document.getElementById('questions-grid');
    const allCards = Array.from(grid?.children || []);
    const categoryElements = document.querySelectorAll('[data-category]');
    const searchBox = document.getElementById('search-box') as HTMLInputElement;
    const selectedCategoriesContainer = document.getElementById('selected-categories');
    let selectedCategories = new Set<string>();

    // --- Helper Functions ---

    function filterQuestions() {
      const searchTerm = searchBox.value.toLowerCase();
      const cards = grid?.children;
      if (!cards) return;

      Array.from(cards).forEach((card: Element) => {
        const title = card.querySelector('h3')?.textContent?.toLowerCase() || '';
        const description = card.querySelector('p')?.textContent?.toLowerCase() || '';
        const cardCategory = card.querySelector('.category-badge')?.getAttribute('data-category-value')?.toLowerCase() || ''; // Use a data attribute

        const categoryMatch = selectedCategories.size === 0 || selectedCategories.has(cardCategory);
        const searchMatch = searchTerm === '' || title.includes(searchTerm) || description.includes(searchTerm);

        if (categoryMatch && searchMatch) {
          card.classList.remove('hidden');
        } else {
          card.classList.add('hidden');
        }
      });
    }

    function renderChips() {
      if (!selectedCategoriesContainer) return;
      selectedCategoriesContainer.innerHTML = ''; // Clear existing chips

      // Update category list visual state
      categoryElements.forEach(el => {
        const category = el.getAttribute('data-category');
        if (!category) return;
        if (category === 'all' && selectedCategories.size === 0) {
          el.classList.add('text-amber-600', 'font-bold');
          el.querySelectorAll('span, div').forEach(span => span.classList.add('font-bold', 'text-amber-600', 'border-amber-200'));
        } else if (category !== 'all' && selectedCategories.has(category)) {
          el.classList.add('text-amber-600', 'font-bold');
          el.querySelectorAll('span, div').forEach(span => span.classList.add('font-bold', 'text-amber-600', 'border-amber-200'));
        } else {
          el.classList.remove('text-amber-600', 'font-bold');
          el.querySelectorAll('span, div').forEach(span => span.classList.remove('font-bold', 'text-amber-600', 'border-amber-200'));
        }
      });
       // Add visual cue for 'All' when nothing is selected
      const allCategoryEl = document.querySelector('[data-category="all"]');
      if (selectedCategories.size === 0) {
          allCategoryEl?.classList.add('text-amber-600', 'font-bold');
          allCategoryEl?.querySelectorAll('span, div').forEach(span => span.classList.add('font-bold', 'text-amber-600', 'border-amber-200'));
      } else {
          allCategoryEl?.classList.remove('text-amber-600', 'font-bold');
          allCategoryEl?.querySelectorAll('span, div').forEach(span => span.classList.remove('font-bold', 'text-amber-600', 'border-amber-200'));
      }


      selectedCategories.forEach(category => {
        const chip = document.createElement('div');
        chip.className = 'flex items-center bg-amber-100 text-amber-800 text-sm font-medium px-3 py-1 rounded-full';

        const categoryText = document.createElement('span');
        categoryText.textContent = category;
        categoryText.className = 'capitalize';
        chip.appendChild(categoryText);

        const removeButton = document.createElement('button');
        removeButton.innerHTML = '&times;'; // 'x' symbol
        removeButton.className = 'ml-2 text-amber-600 hover:text-amber-800 font-bold text-lg leading-none focus:outline-none';
        removeButton.onclick = () => {
          selectedCategories.delete(category);
          renderChips(); // Re-render chips
          filterQuestions(); // Re-filter questions
        };
        chip.appendChild(removeButton);

        selectedCategoriesContainer.appendChild(chip);
      });
    }

    // --- Event Listeners ---

    // Search functionality
    searchBox?.addEventListener('input', filterQuestions);

    // Category filter functionality
    categoryElements.forEach(element => {
      element.addEventListener('click', () => {
        const category = element.getAttribute('data-category');
        if (!category) return;

        if (category === 'all') {
          selectedCategories.clear();
        } else {
          if (selectedCategories.has(category)) {
            selectedCategories.delete(category);
          } else {
            selectedCategories.add(category);
          }
        }

        renderChips(); // Update chips and category list visuals
        filterQuestions(); // Update the grid based on new selection

        // Optional: Clear search box when changing categories? You decided against this before.
        // searchBox.value = '';
      });
    });

    // Initial render
    renderChips(); // Render chips (initially empty) and set 'All' style
  });
</script>

<style>
  .overflow-hidden {
    text-overflow: clip;
  }
</style>